# this file is used to list all the syscalls that will be supported by
# the Bionic C library. It is used to automatically generate the syscall
# stubs, the list of syscall constants (__NR_xxxx) and the content of <linux/_unitsd.h>
#
# each non comment line has the following format:
#
# return_type    func_name[:syscall_name[:call_id]]([parameter_list])  (#syscall_number|stub)
#
# note that:
#      - syscall_name correspond to the name of the syscall, which may differ from
#        the exported function name (example: the exit syscall is implemented by the _exit()
#        function, which is not the same as the standard C exit() function which calls it)
#        The call_id parameter, given that func_name and syscall_name have
#        been provided, allows the user to specify dispatch style syscalls.
#        For example, socket() syscall on i386 actually becomes:
#          socketcall(__NR_socket, 1, *(rest of args on stack)).
#
#      - each parameter type is assumed to be stored on 32 bits, there is no plan to support
#        64-bit architectures at the moment
#
#      - it there is "stub" instead of a syscall number, the tool will not generate any
#        assembler template for the syscall; it's up to the bionic implementation to provide
#        a relevant C stub
#
#      - additionally, if the syscall number is different amoung ARM, x86 and SuperH, use:
#        return_type funcname[:syscall_name](parameters) arm_number,x86_number,superh_number
#
# the file is processed by a python script named gensyscalls.py
#
int		__open:open(const char*, int, mode_t) 0
ssize_t		read(int, void*, size_t) 1
ssize_t		write(int, const void*, size_t) 2
int		close(int) 3
int		mount(const char*, const char*, const char*) 4
off_t		lseek(int, off_t, int) 5
int		execve(const char*, char* const*, char* const*) 6
pid_t		clone(int) 7
void*		mmap(void*, size_t, int, int, int, off_t) 8
int		munmap(void*, size_t) 9
int		mprotect(void*, size_t, int) 10
void		_exit:exit(int) 11
int		fstat(int, struct stat*) 12
pid_t		waitpid(pid_t pid, int* status, int options) 13
pid_t		getpid(void) 14
uid_t		getuid(void) 15
gid_t		getgid(void) 16
int		__fcntl:fcntl(int, int, void*) 17
int		chdir(const char*) 18
pid_t		getppid(void) 19
int		__getcwd:getcwd(char*, size_t) 20
int		unlink(const char*) 21
int		stat(const char*, struct stat*) 22
